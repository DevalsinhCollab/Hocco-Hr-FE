import { useParams } from "react-router-dom";
import "./css/login.css";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { createAadharData } from "../../features/authDetailsSlice";
import {
  sendAgreement,
  sendAgreementToAsmTsm,
} from "../../features/AssetTrackerSlice";
import { toast } from "react-toastify";
import {
  getTemplateById,
  htmlToPdf,
} from "../../features/TemplateDetailSlice";
import { PDFDocument } from "pdf-lib";
import { getCustomerById } from "../../features/customerDetailSlice";
import { LoadingButton } from "@mui/lab";

export default function AadharScreen() {
  const { customer, loading: customerLoading } = useSelector(
    (state) => state.customerData
  );
  const dispatch = useDispatch();
  const { rStamp, cId, tId, aId, ocId } = useParams();
  const [data, setData] = useState({
    name: "",
    adhar: "",
    phone: "",
    gender: "M",
    birth: "",
    custCode: "",
  });
  const [template, setTemplate] = useState({});

  const [agreementLoading, setAgreementLoading] = useState(false);

  useEffect(() => {
    async function CallCustomer() {
      await dispatch(getCustomerById({ id: cId }));
    }

    CallCustomer();
  }, []);

  useEffect(() => {
    async function CallTemplates() {
      let response = await dispatch(getTemplateById({ id: tId }));

      if (response && response.payload && response.payload.data) {
        setTemplate(response.payload.data);
      }
    }

    CallTemplates();
  }, [tId]);

  useEffect(() => {
    if (customer && Object.keys(customer).length > 0) {
      setData({
        name: customer.adharName,
        adhar: customer.adhar,
        phone: customer.contactPersonMobile,
        birth: customer.birthYear,
        custCode: customer.custCode,
        gender: ["male"].includes(customer.gender.toLowerCase())
          ? "M"
          : ["female"].includes(customer.gender.toLowerCase())
            ? "F"
            : "O",
      });
    }
  }, [customer]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setData({
      ...data,
      [name]: value,
    });
  };

  const handleRadioChange = (e) => {
    const { name, value } = e.target;
    setData({
      ...data,
      [name]: value,
    });
  };

  const sendAgreementFuncFinal = async (fundata, custData) => {
    let finalData = {
      templateId: tId,
      base64Pdf: fundata,
      custId: cId,
      custCode: custData?.custCode,
      assetsId: aId,
      custName: data.name,
      birth: data.birth,
      gender: data.gender,
      adhar: data.adhar,
    };

    const response = await dispatch(sendAgreement(finalData));

    if (response && response.payload && response?.payload?.success) {
      let dataObj = {
        custCode: custData?.custCode,
        custName: data.name,
        base64Pdf: fundata,
      };

      await dispatch(sendAgreementToAsmTsm(dataObj));

      // await dispatch(sendAgreement(finalData));
      toast("Agreement Sent Successfully");
    }

    setAgreementLoading(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setAgreementLoading(true);
    const custData = data;

    const addData = await dispatch(
      createAadharData({ ...data, custCode: custData?.custCode, custId: cId })
    );
    if (addData && addData.payload && addData.payload.success) {
      toast("Data added successfully");
    } else {
      if (
        addData &&
        addData.payload &&
        addData?.payload.response.status === 400
      ) {
        return toast(`${addData.payload.response.data.error}`);
      }
    }

    let sendPdfData = null;
    if (template.htmlTemplate) {
      const htmlToPdfData = await dispatch(
        htmlToPdf([template, aId, custData, ocId, rStamp, data])
      );
      sendPdfData = htmlToPdfData?.payload?.base64;
    } else {
      sendPdfData = template.mainTemplate;
    }

    if (rStamp == "yes") {
      try {
        let pdfBytes = sendPdfData;

        if (!pdfBytes) {
          pdfBytes = template.mainTemplate;
        }

        const signatureBytes =
          "";

        const pdfDoc = await PDFDocument.load(pdfBytes);

        // pdfDoc.getPages().forEach(async (element) => {
        //   let { width, height } = element.getSize();
        //   let image = await pdfDoc.embedPng(signatureBytes);

        //   let { width: imageWidth, height: imageHeight } = image.scale(0.4);

        //   element.drawImage(image, {
        //     x: width - 130,
        //     y: height / 100 + 30,
        //     width: imageWidth,
        //     height: imageHeight,
        //     opacity: 1,
        //     color: rgb(1, 0, 0),
        //   });
        // });

        const modifiedPdfBytes = await pdfDoc.save();
        let base64String = null;
        const blob = new Blob([modifiedPdfBytes], { type: "application/pdf" });
        var reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = async function () {
          base64String = reader.result;
          base64String = base64String.split("base64,")[1];

          sendAgreementFuncFinal(base64String, custData);
        };
      } catch (error) {
        console.log("error------", error);
      }
    } else {
      let pdfBytes = sendPdfData;
      if (!pdfBytes) {
        pdfBytes = template.mainTemplate;
      }
      sendAgreementFuncFinal(pdfBytes, custData);
    }
  };

  return (
    <>
      <div className="loginBox">
        <div className="loginExtraBox w-100">
          <div className="loginData">
            <div className="">
              <h2 className="text-center">Aadhar Verify</h2>
            </div>
            <form method="post" onSubmit={handleSubmit}>
              <div className="loginForm">
                <div>
                  <label>Name as per aadhar</label>
                  <input
                    type="text"
                    className="emailInput form-control"
                    placeholder="Name"
                    required={true}
                    name="name"
                    value={data?.name}
                    onChange={handleInputChange}
                  />
                </div>

                <div className="mt-3">
                  <label>Aadhar Last 4 Digits</label>
                  <input
                    type="text"
                    className="emailInput form-control"
                    placeholder="Aadhar No."
                    required={true}
                    name="adhar"
                    value={data?.adhar}
                    onChange={handleInputChange}
                  />
                </div>

                <div className="mt-3">
                  <label>Phone</label>
                  <input
                    type="number"
                    className="emailInput form-control"
                    placeholder="Phone"
                    required={true}
                    name="phone"
                    value={data?.phone}
                    onChange={handleInputChange}
                  />
                </div>
                <div className="mt-3">
                  <label>Birth Year</label>
                  <input
                    type="number"
                    placeholder="0000"
                    className="form-control"
                    required={true}
                    name="birth"
                    value={data?.birth}
                    onChange={handleInputChange}
                  />
                </div>

                <div className="mt-3 d-flex gap-3">
                  <label>
                    <input
                      type="radio"
                      name="gender"
                      value="M"
                      className="me-1"
                      checked={data.gender === "M"}
                      onChange={handleRadioChange}
                    />
                    Male
                  </label>
                  <label>
                    <input
                      type="radio"
                      name="gender"
                      value="F"
                      className="me-1"
                      checked={data.gender === "F"}
                      onChange={handleRadioChange}
                    />
                    Female
                  </label>
                  <label>
                    <input
                      type="radio"
                      name="gender"
                      value="O"
                      checked={data.gender === "O"}
                      className="me-1"
                      onChange={handleRadioChange}
                    />
                    Other
                  </label>
                </div>

                <div className="py-3">
                  <div className="d-flex justify-content-center align-items-center w-100">
                    <LoadingButton
                      type="submit"
                      className="btn btn4 me-3"
                      style={{ width: "70%" }}
                      loading={agreementLoading}
                    >
                      Get Agreement
                    </LoadingButton>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
